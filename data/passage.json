{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1638539793065385986",
        "title": "前端如何让用户写自定义代码，深入配置",
        "description": null,
        "content": "前段时间在用Angular开发动态表格，类似于低代码配置表格属性，做到表单验证时，用户只能配置一些常规的表单验证，或者通过正则判断，但是如果需要表单内一些复杂逻辑，比如input 1 + input2 满足某些特定条件，那么该如何去做呢？\n\n## 解决方法\n在ngx-formly的fields中用到了如下代码：\n\n```ts\nexpressions: {\n  'props.label': `model.roleId === '<new_role>' ? 'Add New Role' : 'Role Details'`\n}\n```\n\n大致就是通过某个特定条件来渲染当前表单项的label，当时好奇为什么都是用字符串，而不是直接用js，还能有高亮提示，后面去阅读到了formly与expressions相关源码，发现原来是通过[eval](https://github.com/ngx-formly/ngx-formly/blob/HEAD/src/core/src/lib/extensions/field-expression/utils.ts)来执行的，又学习到了。\n\n## 源码如下：\n```ts\nexport function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (typeof expression === 'function') {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n```\n\n\n## 具体用法\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1621094259987947521/Iqyk7SJ1-image.png)\n\n通过点击button，然后就执行用户输入的eval内容：**弹窗 + 输出当前text的表单项内容 + 换行 + 自定义内容** \n```ts\nconst [form] = useForm()\nconst handlerClick = () => {\n        evalExpression(\n           evalStringExpression(form.getFieldValue('eval'), ['form']),\n           this,\n           [form])\n}\n```\n\n\n这么写的好处\n\n通过evalExpression可以获取**当前环境**的一个上下文，传递给用户使用，也就是说我可以把想要的环境提供给用户操作使用，上面例子就是把当前的form对象给了用户，那么用户就可以直接使用 form 来获取当前所有表单项的操作，那么我就可以做复杂的表单逻辑验证，包括直接写正则等；把这一块逻辑提供给了用户使用。\n\n通过昨天的股东大会，受到鱼皮的激励，就应该多分享一些东西，锻炼一下文笔，最关键是如果我能把这个东西说清楚了，那么证明我也是真的学废了这个知识点！！！\n\n欢迎各位友友们，批评指正~",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1621094259987947521/E51UELUr-QQ图片20221118113213.jpg",
        "language": null,
        "viewNum": 13,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1621094259987947521",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-22T13:55:03.000+00:00",
        "updateTime": "2023-03-26T12:59:17.000+00:00",
        "user": {
          "id": "1621094259987947521",
          "planetCode": "9263",
          "userName": "帅气的木木",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1621094259987947521/Zz4fuDXN-QQ图片20221118113213.jpg",
          "gender": 1,
          "userProfile": "前端CV工程师",
          "userRole": "vip",
          "interests": [
            "资源"
          ],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 999999999,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 5,
          "coin": 20,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-19T23:00:59.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-02T10:32:44.000+00:00",
          "updateTime": "2023-03-23T07:40:52.000+00:00"
        },
        "tags": [
          "文章",
          "前端"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1637453585451110402",
        "title": "专题二：二分法",
        "description": "蓝桥杯之二分算法",
        "content": "# 专题二：二分法\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/PyoV3oWo-image.png)\n# 前言\n\n本文主要介绍二分法是什么，二分法的原理，二分法的模板以及使用场景，并且会举一些例题和蓝桥杯真题辅助理解。\n\n# 是什么\n\n官方版：二分查找是一个时间效率极高的算法，尤其是面对大量的数据时，其查找效率是极高，时间复杂度是log(n)。 &#x20;\n主要思想就是不断的对半折叠，每次查找都能除去一半的数据量，直到最后将所有不符合条件的结果都去除，只剩下一个符合条件的结果。\n\n精简版：二分区间快速高效找到结果。\n\n# 模板\n\n## 查找大于等于/大于key的第一个元素\n\n这种通常题目描述为满足某种情况的最小的元素。\n\n```cpp\n   int left = 1,right = n;\n    while(left < right)\n    {\n        //这里不需要加1。我们考虑如下的情况，最后只剩下A[i],A[i + 1]。\n        //首先mid = i，如果A[mid] > key，那么right = left = i，跳出循环，如果A[mid] < key，left = right = i + 1跳出循环，所有不会死循环。\n        int mid = (left + right) / 2;\n        if(A[mid] > key)//如果要求大于等于可以加上等于，也可以是check(A[mid])\n            right = mid;\n        //因为找的是大于key的第一个元素，那么比A[mid]大的元素肯定不是第一个大于key的元素，因为A[mid]已经大于key了，所以把mid+1到后面的排除\n        else\n            left = mid + 1;\n        //如果A[mid]小于key的话，那么A[mid]以及比A[mid]小的数都需要排除，因为他们都小于key。不可能是第一个大于等于key的元素，\n    }\n\n```\n\n## 查找小于等于/小于key的最后一个元素\n\n这种通常题目描述为满足某种情况的最大的元素.\n\n```cpp\n    int left = 1, right = n;\n    while(left < right)\n    {\n        //这里mid = (left + right + 1) / 2;\n        //考虑如下一种情况，最后只剩下A[i],A[i + 1]，如果不加1，那么mid = i，如果A[mid] < key，执行更新操作后，left = mid，right = mid + 1，就会是死循环。\n        //加上1后，mid = i + 1,如果A[mid] < key，那么left = right = mid + 1,跳出循环。如果A[mid] > key，left = mid = i，跳出循环。\n        int mid = (left + right + 1) / 2;\n        if(A[mid] < key)\n            left = mid;//如果A[mid]小于key，说明比A[mid]更小的数肯定不是小于key的最大的元素了，所以要排除mid之前的所有元素\n        else\n            right = mid - 1;//如果A[mid]大于key，那么说明A[mid]以及比A[mid]还要大的数都不可能小于key，所以排除A[mid]及其之后的元素。\n    }\n\n\n```\n\n# 判断二分的特性\n\n1.  单调性：数组具有明显的单调性\n2.  二段性：答案在一段区间内，二分答案\n\n# 分类\n\n-   二分查找：在一个已知的有序数据集上进行二分地查找\n-   二分答案：答案有一个区间，在这个区间中二分，直到找到最优答案\n\n# 二分思考顺序\n\n首先通过题目背景和check(mid)函数的逻辑，判断答案落在左半区间还是右半区间。\n\n左右半区间的划分方式一共有两种：\n\n中点mid属于左半区间，则左半区间是\\[l, mid]，右半区间是\\[mid+1, r]，更新方\n\n式是r = mid;或者 l = mid + 1;，此时用第一个模板；\n\n中点mid属于右半区间，则左半区间是\\[l, mid-1]，右半区间是\\[mid, r]，更新方\n\n式是r = mid - 1;或者 l = mid;，此时用第二个模板\n\n（第一个找符合要求的最小值，第二个找符合要求的最大值）\n\n# 力扣704：二分查找\n\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/eLMZuUV0-image.png)\n\n## 代码\n\n```cpp\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n\n        int l=0,r=nums.size()-1;\n        while(l<r){\n            int mid=(l+r)/2;\n            if(nums[mid]>=target) r=mid;\n            else l=mid+1;\n        }\n        if(nums[l]==target) return l;\n        return -1;\n    \n    }\n};\n```\n\n## 题解\n\n本题就是对模板的理解以及运用，属于是二分查找类型，因此用模板1或者模板2都是可以的，并不涉及最大值与最小值的问题。\n\n# 数的范围\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/VwILZO4c-image.png)\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/3LPGwe53-image.png)\n\n## 代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=100010;\nint q[N];\nint n,m;\n\nint main()\n{\n    cin>>n>>m;\n    for(int i=0;i<n;i++) cin>>q[i];\n    \n    while(m--)\n    {\n        int x;\n        cin>>x;\n        int l=0,r=n-1;\n        while(l<r)\n        {\n            int mid=l+r >>1;\n            if(q[mid]>=x) r=mid;\n            else l=mid+1;\n        }\n        \n        if(q[l]!=x) cout<<\"-1 -1\"<<endl;\n        else{\n            cout<<l<<\" \";\n            int l=0,r=n-1;\n            while(l<r)\n            {\n                int mid=l+r+1>>1;\n                if(q[mid]<=x) l=mid;\n                else r=mid-1;\n            }\n            \n            cout<<l<<endl;\n        }\n    }\n}\n```\n\n## 题解\n\n本题中的“起始位置”以及“最终位置”就分别对应最小值和最大值，因此对模板的理解要到位，第一个模板更新r向左边找的是找出最小值，第二个则是最大值，当然有可能是相等的情况以及找不到的情况。\n\n# 我在哪？\n\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/aTHXcf00-image.png)\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/nyvEe7sI-image.png)\n## 代码\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nstring str;\nunordered_set<string> S;\n\n//找到任何两个长度为k的子串都不互相同\n//知识点：判断某个串是否只出现一次可以用哈希表\n\nbool check(int mid)\n{\n    for(int i=0;i+mid-1<n;i++)//区间大小为mid\n    {\n        string s=str.substr(i,mid);//取出子串\n        if(S.count(s)) return false;\n        S.insert(s);\n    }\n    \n    return true;\n}\n    \nint main()\n{\n    cin>>n;\n    cin>>str;\n    int l=1,r=n;//答案的区间\n    while(l<r)\n    {\n        int mid=l+r >> 1;\n        if(check(mid)) r=mid;\n        else l=mid+1;\n    }\n    \n    cout<<l<<endl;\n}\n```\n\n## 题解\n\n注意到本题属于是二分答案类型，答案是在一个区间里的，再根据题意要求出最小值选用第一个模板即可，\n\n本题需要掌握一个哈希表的知识点，可以用来快速判重，下次出一个专门的stl使用技巧，总结出所有常用的库以及函数。\n\n思维点：找到任何两个长度为k的子串都不互相同\n\n# 分巧克力\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/Izt9iZJu-image.png)\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/uXAWWkrU-image.png)\n\n\n## 代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=100010;\nint w[N], h[N];//存储长、宽\nint n,k;\n//因为答案在一个区间内：具有二段性，因此可以用二分答案法。\n\nbool check(int a){\n    int num=0;//切出的数量\n    for(int i=0;i<n;i++)\n    {\n        num+=(w[i]/a)*(h[i]/a);//推出的公式\n        if(num>=k) return true;\n    }\n    \n    return false;\n}\n\n\nint main()\n{\n    cin>>n>>k;\n    for(int i=0;i<n;i++) cin>>h[i]>>w[i];\n    \n    int l=1,r=1e5;//答案的区间\n    while(l<r)\n    {\n        int mid=(l+r+1) >>1;\n        if(check(mid)) l=mid;//因为求最大值\n        else r=mid-1;\n    }\n    \n    cout<<r<<endl;\n    return 0;\n}\n```\n\n## 题解\n\n本题注意到随着边长的增加，分的块数就会减小，满足单调递减的性质，考虑用二分出最大的边长。\n\n且答案在一个区间内，因此可以用二分答案的方法，再根据题目求最大值来选出用第二个模板。\n\n本题还需要推出一个可以切出巧克力块数的公式。\n\n# 机器人跳跃问题\n\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/PqcPTKO8-image.png)\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/3lq1kLSC-image.png)\n\n## 代码\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 100010;\n\nint n;\nint h[N];\n\nbool check(int e)\n{\n    for (int i = 1; i <= n; i ++ )\n    {\n        e + = e - h[i];//每次失去或者得到能量\n       if (e >= 1e5) return true;//需要注意超过能量最大值的特判\n        if (e < 0) return false;\n    }\n    return true;\n}\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &h[i]);\n\n    int l = 0, r = 1e5;//\n    while (l < r)\n    {\n        int mid = l + r >> 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n\n    printf(\"%d\\n\", r);\n\n    return 0;\n}\n\n\n\n```\n\n## 题解\n\n本题还是有一定难度的，首先你需要想到可以用二分答案法来写，因为答案在一个区间内，并且不管你是得到还是失去能量都可以用一个表达式来表示，只不过可以是正也可以负值罢了，再去判断是否有一步走了会小于0，如果小于0了就不符合。本题还需要注意不能超出能量最大值。\n\n# 总结\n\n本文主要介绍了二分法，重点需要掌握二分的两个模板和理解方法，灵活运用到题目中还需大家多做题，增加自己的理解力和敏锐度。预祝各位考出好成绩！\n\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/d6g5W32F-image.png)",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1612112775822180354/Xn86CHbE-01.png",
        "language": null,
        "viewNum": 30,
        "thumbNum": 3,
        "favourNum": 1,
        "commentNum": 1,
        "priority": 0,
        "userId": "1612112775822180354",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-19T13:58:51.000+00:00",
        "updateTime": "2023-03-24T15:40:23.000+00:00",
        "user": {
          "id": "1612112775822180354",
          "planetCode": "4838",
          "userName": "小火龙",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/vialKcxTib4GfndTME6AqsmGedeZrOGuOOXEZDibdk7csQUXZaXe8jXRr8mTQrCj049AGz48ZCRL7rIjvNicmEKo9A/132",
          "gender": 1,
          "userProfile": "计算机科学与技术专业本科在读，热爱生活，热爱技术。",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": "计算机科学与技术",
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "校招",
          "github": null,
          "blog": null,
          "score": 35,
          "coin": 170,
          "followeeNum": 6,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-01T01:02:21.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-08T15:43:32.000+00:00",
          "updateTime": "2023-03-20T14:28:39.000+00:00"
        },
        "tags": [
          "文章",
          "蓝桥杯"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1636352894565404673",
        "title": "专题一：日期问题",
        "description": "蓝桥杯之日期日历问题",
        "content": "# 前言\n\n在专题一种我们主要讲解关于日期的问题，比较基础但是一定要掌握！！在**蓝桥杯**竞赛中，常会考到一些日期日历的问题，出现在填空题或者编程的前几题，因此巩固好基础更加有助于我们在比赛中遇到类似的题时游刃有余。下面来枚举一些例题与蓝桥杯的真题。格式会按照：**题目—题解—知识点**，十分清晰！！废话不多说，先上模板！！\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/uh5Cu2jY-image.png)\n\n# 模板\n\n非常重要！！可以说**背下来**可以做出来％90的日期日历的问题！\n\n```C++\n#include <iostream>\nusing namespace std;\n\nint months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n// 判断日期的合法性\nbool check_valid(int date) //形如20210305\n{\n    int year = date / 10000;\n    int month = date % 10000 / 100;\n    int day = date % 100;\n\n    if (month <= 0 || month >= 13) return false;\n    if (day == 0 || month != 2 && day > months[month]) return false;\n\n    if (month == 2)\n    {\n        int leap = (year % 4 == 0 && year % 100 != 0 || year % 400 == 0);\n        if (day > 28 + leap) return false;\n    }\n\n    return true;\n}\n\n// 得到某年某月的天数\nint get(int year, int month) \n{\n    if (month != 2) return months[month];\n    else\n    {\n        // 2月\n        int leap = (year % 4 == 0 && year % 100 != 0 || year % 400 == 0);\n        return 28 + leap;\n    }\n}\n\n// 判断两个日期之间有多少个回文日期\nint get(int date1, int date2, int k) //k使函数签名不同从而编译通过\n{\n    int ans = 0;\n    for (int i = 1000; i < 10000; i++)\n    {\n        int date = i, x = i;\n        for (int j = 0; j < 4; j++) date = date * 10 + x % 10, x /= 10; //根据年份构造出回文日期\n        if (date1 <= date && date <= date2 && check_valid(date)) ans++; \n    }\n\n    return ans;\n}\n\n// 给定年月日，经过n天后对应的日期\nvoid pass(int y, int m, int d, int n)\n{\n    while (n--)\n    {\n        d++;\n        if (d > get(y, m)) m++, d = 1;\n        if (m > 12) y++, m = 1;\n    }\n    printf(\"%d-%02d-%02d\\n\", y, m, d);\n}\n\n\n\n```\n\n\n\n# 1、回文日期-1\n\n\n\n![image_8DQXwLdh4f.png](https://pic.code-nav.cn/post_picture/1612112775822180354/i0qkvjFW-image_8DQXwLdh4f.png)\n\n![image_F5qCyEFE0r.png](https://pic.code-nav.cn/post_picture/1612112775822180354/KkZ8UvYj-image_F5qCyEFE0r.png)\n\n## 代码\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint months[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};\n//判断日期是否合法的模板，背诵！！\nbool check(int date)\n{\n    int year=date/10000;\n    int month= date%10000/100;\n    int day = date%100;\n \n    if(!month||month>=13||!day) return false;\n    if(month!=2&&day>months[month]) return false;\n \n    if(month==2)\n    {\n        bool leap = year%4==0 &&year %100!=0 || year %400==0;\n        if(day>leap+28) return false;\n    }\n \n    return true;\n}\n\n\nint main()\n{\n    int data1,data2;\n    cin>>data1>>data2;\n \n    int res=0;\n    for(int i=0;i<10000;i++)\n        {\n            int x=i,r=i;\n            for(int j=0;j<4;j++) r=r*10+x%10,x=x/10;//回文串转换的算法\n            if(r>=data1&& r<=data2 && check(r)) res++;\n        }\n    cout<<res<<endl;\n    return 0;\n}\n\n```\n\n## 题解\n\n由于只有八位数，且回文串左右对称，因此可以只枚举左边，这样只需要枚举0~9999\n\n然后判断：\n\n1. 整个八位数构成的日期是否合法\n2. 是否在范围内\n\n**本题思维在于枚举所有回文数再去筛选出符合要求的。**\n\n知识点：\n\n1. 判断日期是否合法的模板\n2. 回文串转换算法\n\n\n\n# 2、日期识别\n\n![image_kw0EJjwrmn.png](https://pic.code-nav.cn/post_picture/1612112775822180354/pJkhQ91H-image_kw0EJjwrmn.png)\n\n![image_wTHGGecViR.png](https://pic.code-nav.cn/post_picture/1612112775822180354/u0Uo5MA9-image_wTHGGecViR.png)\n\n## 代码\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring month[13]={\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"};\nint main()\n{\n   string st;\n   int m,d1,d2;\n   cin>>st;\n   for(int i=1;i<=12;i++)\n        if(st.substr(0,3)==month[i])\n        {\n            m=i;\n            break;\n        }\n    d1=st[3]-'0';\n    d2=st[4]-'0';\n    cout<<m<<\" \";\n    if(d1!=0) cout<<d1;\n    cout<< d2;\n}\n```\n\n## 题解\n\n本题主要就是枚举，再加上一些字符串处理的知识，并没有什么思维上的难度。\n\n知识点：\n\n1. substr函数：返回从某个位置后指定长度的子串\n2. 字符转成数字的操作\n\n\n\n# 3、日期类\n\n\n![image_xkj-5iiRs9.png](https://pic.code-nav.cn/post_picture/1612112775822180354/ArlJGuci-image_xkj-5iiRs9.png)\n\n## 代码\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};\nint main()\n{\n    int n,y,m,d;\n    cin>>n;\n    while(n--){\n        cin>>y>>m>>d;\n        if(y%4==0&&y%100!=0||y%400==0)a[2]=29;\n        else a[2]=28;\n        d++;\n        if(d>a[m]){\n            m++;\n            d=1;\n        }\n        if(m>12){\n            m=1;\n            y++;\n        }\n        if(y<10)cout<<0;\n        cout<<y<<'-';\n        if(m<10)cout<<0;\n        cout<<m<<'-';\n        if(d<10)cout<<0;\n        cout<<d;\n        cout<<endl;\n    } \n    return 0;\n}\n\n```\n\n## 题解\n\n变量是：y=year m=month  d=day\n\n然后我们判断，只要我们的天数大于了这个月的天数，我们就要把月份m++，并且把日回到1号\n同理只要我们的月数大于了12，我们就要把年份y++，并且把月份回到1月\n\n接下来我们还要考虑一个问题，就是一位数前加0（输出格式）\n我们只要一次判断即可：只要y是一位数，先输出个0，日也是一样的做法。\n\n知识点：\n\n1. 算天数模板的运用\n2. 判断闰年\n\n\n\n\n\n# 4、打印日期\n\n\n![image_UxZ4jtKlmW.png](https://pic.code-nav.cn/post_picture/1612112775822180354/WY21mNXp-image_UxZ4jtKlmW.png)\n\n\n![image_ixcooYY5Yp.png](https://pic.code-nav.cn/post_picture/1612112775822180354/2Tfzyjkc-image_ixcooYY5Yp.png)\n## 代码\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};\nint main()\n{\n    int y,d;\n    //输入多行数据\n    while(cin>>y>>d){\n        //获得二月的天数\n        if(y%4==0&&y%100!=0||y%400==0)a[2]=29;\n        else a[2]=28;\n        int m=1;\n        while(d>0){\n            if(d-a[m]<=0)break;\n            else{\n                d-=a[m];\n                m++;\n            }\n        }\n        printf(\"%04d-%02d-%02d\\n\",y,m,d);//数据宽度不足时用0填补\n    }\n}\n\n```\n\n## 题解\n\n先把每个月的天数给列下来，再判断闰年。\n最后我们来统计是几月几日，如果减去m月的天数，就比0要小了，我们就赶快退出\n如果不会的话，月份+1，并且减去m月的天数。\n\n知识点：\n\n1. 格式输出大法：printf(\"%04d-%02d-%02d\\n\",y,m,d);\n2. 判断闰年\n\n\n\n\n\n# 5、日期\n\n\n![image_5wlbv3TwGD.png](https://pic.code-nav.cn/post_picture/1612112775822180354/MR1FvJa0-image_5wlbv3TwGD.png)\n\n## 代码\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint a[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};\nstring week[7]={\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",};\nint main()\n{\n    int n,m,day1=0,day2=0;\n    cin>>n>>m;\n    for(int i=1;i<4;i++)day1+=a[i];\n    day1+=12;\n    for(int i=1;i<n;i++)day2+=a[i];\n    day2+=m;\n    cout<<week[(day2-day1)%7];\n}\n\n```\n\n## 题解\n\n本题思维点在于把星期四当成第一天，然后计算出给出的日期与第一天的差值，再利用取模的算法求出是星期几，如果对取模算法不熟悉的话需要自行在草稿纸上模拟一遍，并记下这个结论。\n\n知识点：\n\n1. 打表，将星期四作为第一天\n2. 取模运算求出是星期几\n\n\n\n\n\n# 6、日期计算\n\n\n![image_plw0op1pYi.png](https://pic.code-nav.cn/post_picture/1612112775822180354/4bd7A55f-image_plw0op1pYi.png)\n\n![image_nCOo4tQrC-.png](https://pic.code-nav.cn/post_picture/1612112775822180354/ZYpfRM27-image_nCOo4tQrC-.png)\n## 代码\n\n### 解法一：模板法\n\n```C++\n#include <iostream>\nusing namespace std;\n\nint months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n// 得到某年某月的天数\nint get(int year, int month)\n{\n    if (month != 2) return months[month];\n    else\n    {\n        // 2月\n        int leap = (year % 4 == 0 && year % 100 != 0 || year % 400 == 0);\n        return 28 + leap;\n    }\n}\n\n// 给定年月日，经过n天后对应的日期\nvoid pass(int y, int m, int d, int n)\n{\n    while (n--)\n    {\n        d++;\n        if (d > get(y, m)) m++, d = 1;\n        if (m > 12) y++, m = 1;\n    }\n    printf(\"%d\\n%d\\n\", m, d);\n}\n\nint main()\n{\n    int y, n;\n    cin >> y >> n;\n    int m = 1, d = 0;\n    pass(y, 1, d, n);\n    return 0;\n}\n\n\n```\n\n### 思维法：\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\nint a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};\nint main()\n{\n    int y,d;\n    cin>>y>>d;\n    if(y%4==0&&y%100!=0||y%400==0)a[2]=29;else a[2]=28;\n    int x=0;\n    while(d>0){\n        if(d-a[x]<=0)break;\n        else{\n            d-=a[x];\n            x++;\n        }\n    }\n    cout<<x<<'\\n'<<d;\n}\n\n\n```\n\n## 题解\n\n本题考察日期计算的方法，可以套用模板，也可以用思维法减少代码量，看个人喜好。\n\n知识点：\n\n1. 得到某年某月某日的天数\n2. 计算给定年月日，经过n天后对应的日期\n\n\n\n# 7、特殊年份—蓝桥杯十二届真题\n\n\n![image_xATHh4b7-k.png](https://pic.code-nav.cn/post_picture/1612112775822180354/K3BttOjX-image_xATHh4b7-k.png)\n\n## 代码\n\n```C++\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int count=0;\n    for(int i=0;i<5;i++)\n    {\n        string s;\n        cin>>s;\n        if(s[0]==s[2]&&s[3]-s[1]==1)\n        {\n            count++;\n        }\n    }\n \n \n    cout<<count<<endl;\n \n}\n```\n\n## 题解\n\n水题一套，只要会字符串处理即可AC\n\n\n\n# 7、回文日期-2\n\n\n![image_gN7OPu6RwK.png](https://pic.code-nav.cn/post_picture/1612112775822180354/5Q9RmDCt-image_gN7OPu6RwK.png)\n\n![image_eT1jL6BF79.png](https://pic.code-nav.cn/post_picture/1612112775822180354/1PTpuzFI-image_eT1jL6BF79.png)\n## 代码\n\n```C++\n#include <iostream>\nusing namespace std;\n\nint months[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n// 判断日期的合法性\nbool check_valid(int date) \n{\n    int year = date / 10000;\n    int month = date % 10000 / 100;\n    int day = date % 100;\n\n    if (month <= 0 || month >= 13) return false;\n    if (day == 0 || month != 2 && day > months[month]) return false;\n\n    if (month == 2)\n    {\n        int leap = (year % 4 == 0 && year % 100 != 0 || year % 400 == 0);\n        if (day > 28 + leap) return false;\n    }\n\n    return true;\n}\n\n// 判断date是否满足ABABBABA形式\nbool check(int date)\n{\n    int year = date / 10000;\n    int month = date % 10000 / 100;\n    int day = date % 100;\n\n\n    if (month % 10 == day / 10) return false; //A==B return false\n    if ((month % 10 == day % 10) && (month / 10 == day / 10)) return true;\n\n    return false;\n}\n\nbool st1, st2;\nint ans1, ans2;\n\nint main()\n{\n    int date;\n    cin >> date;\n\n    int year = date / 10000;\n    while (true)\n    {\n        int new_date = year, x = year;\n        for (int i = 0; i < 4; i++) new_date = new_date * 10 + x % 10, x /= 10; //构造回文日期\n\n        if (new_date == date)  //构造出来的是同一天\n        {\n            year++;\n            continue;    \n        }\n\n        if (check_valid(new_date))\n        {\n            if (!st1) st1 = true, ans1 = new_date;\n            if (!st2 && check(new_date)) st2 = true, ans2 = new_date;\n\n        }\n\n        year ++;\n        if (st1 && st2) break; //找到两个解则退出\n    }\n\n    printf(\"%d\\n%d\", ans1, ans2);\n    return 0;\n}\n\n\n```\n\n## 题解\n\n本题需要找到两个符合题目的答案，第一个是回文子串，第二个符合格式的回文子串。\n\n先构造回文子串\n\n用函数判断是不是合法日期，如果不是就跳到下一个。\n如果符合，那么第一个答案已经找到，即可标记为true，在去判断是否符合格式.\n\n最后找到两个答案就输出即可。\n\n知识点：\n\n1. 回文子串构造\n2. 判断合法日期\n3. 判断是否符合格式\n\n\n\n# 总结\n\n以上的题基本包含了所有会考到的日期日历问题，各位一定要**先把模板背熟**，再去**写例题**，不会的题一定要\n\n好好琢磨题解的思维以及需要掌握的知识点是否已经烂熟于心。开篇大吉，预祝各位考生考出好成绩！！\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1612112775822180354/jxux7Zb3-image.png)\n\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1612112775822180354/lCRk0Zay-下载.png",
        "language": null,
        "viewNum": 29,
        "thumbNum": 3,
        "favourNum": 2,
        "commentNum": 0,
        "priority": 0,
        "userId": "1612112775822180354",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-16T13:05:06.000+00:00",
        "updateTime": "2023-03-26T16:34:41.000+00:00",
        "user": {
          "id": "1612112775822180354",
          "planetCode": "4838",
          "userName": "小火龙",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/vialKcxTib4GfndTME6AqsmGedeZrOGuOOXEZDibdk7csQUXZaXe8jXRr8mTQrCj049AGz48ZCRL7rIjvNicmEKo9A/132",
          "gender": 1,
          "userProfile": "计算机科学与技术专业本科在读，热爱生活，热爱技术。",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": "计算机科学与技术",
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "校招",
          "github": null,
          "blog": null,
          "score": 35,
          "coin": 170,
          "followeeNum": 6,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-01T01:02:21.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-08T15:43:32.000+00:00",
          "updateTime": "2023-03-20T14:28:39.000+00:00"
        },
        "tags": [
          "文章",
          "蓝桥杯"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1629504302449963010",
        "title": "快速通过软考",
        "description": "如何快速通过软件设计师的考试",
        "content": "\n![f8af55a9c0104edd85bfb0988b70511.jpg](https://pic.code-nav.cn/post_picture/1612112775822180354/gSmF2r0p-f8af55a9c0104edd85bfb0988b70511.jpg)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2ed16e5b7ad74d439fde93802c836a91.png#pic_center)\n\n# 什么是软考？\n\n软考全称“计算机技术与软件专业技术资格（水平）考试”，由国家人力资源和社会保障部、工业和信息化部领 导下的国家级考试，设置了27个资格包括初级、中级、高级三个级别。官网地址如下：\n\n<https://www.ruankao.org.cn/>\n\n# 软考的含金量与意义\n\n1.  软考证书每月都有补贴，不仅国企和事业单位，甚至普通公司也会补贴。并且获取软考证书可以补税退税。\n2.  软考是国家级考试。通过软考中高级考试，就是国家认定的中高级技术人员。国家很多政策优惠在计算机领域只认软考。而国外的那些证书（OCP数据库认证、思科认证）是不能享受优惠政策的。软考能够积分落户、退休金补贴、个税补贴、申请廉租房......。。软考证书可以抵扣个税，大概可以少交1500元的个人所得税。\n3.  软考的知识点覆盖面十分广泛，基本会设计到软件开发的所有需要掌握的理论知识，比如设计模式、\n\n    软件工程、数据库、计算机网络、操作系统、计算机组成原理等计算机科班所必须学习的知识，因此非常适合了解该专业的一个系统的框架以及深入理解一些理论知识。\n\n# 正常备考节奏\n\n# 备考时长\n\n首先去官网买一本你所要考的等级的官方用书，我这边就以我通过的中级软件设计师来举例了，然后再购买近五年的上下班年的真题试卷结合着下面up主的视频来学习，大概需要三个月的时长。\n\n## 学习路线\n\n推荐一个up主的视频，非常细致且好理解，如果能完完整整地跟着学完一定能够高分通过！！\n\n<https://www.bilibili.com/read/cv18526892>\n\n\n## 推荐笔记\n[笔记](<https://blog.csdn.net/apple_53947466/article/details/125557473?app_version=5.7.3&csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22125557473%22%2C%22source%22%3A%22apple_53947466%22%7D&utm_source=app>)\n\n## 高频考点\n [考点1](<https://blog.csdn.net/m0_64128218/article/details/127291829?app_version=5.9.0&code=app_1562916241&csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22127291829%22%2C%22source%22%3A%22m0_64128218%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app>)\n \n[考点2](<https://blog.csdn.net/m0_64128218/article/details/127289970?app_version=5.9.0&code=app_1562916241&csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22127289970%22%2C%22source%22%3A%22m0_64128218%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app>)\n\n\n# 重要考点\n\n自己从刷的题中总结出来的知识点。你们遇到了自然就能懂是什么意思了，对照着知识点去回忆知识是一种很高效的查漏补缺的办法。\n\n-   寻址方式\n-   总线\n-   流水线\n-   中断（DMA）\n-   存储器（RAM flesh cache）\n-   原码、补码、阶码\n-   防火墙  网络安全知识\n-   加密算法（公开，私有（共享）） 非对称\n-   软著、商业秘密、著作权\n-   数据流图\n-   软件设计原则\n-   风险检测\n-   活动图\n-   符号表、决策表、广义表\n-   有限自动机\n-   进程状态\n-   页面管理 &#x20;\n-   PV图\n-   死锁算法公式\n-   磁盘旋转算法\n-   增量模型、瀑布模型、螺旋模型\n-   统一过程up\n-   敏捷开发的五个原则\n-   ISO IEC 9126软件质量模型的六个特性\n-   系统测试\n-   系统分析\n-   概要设计、详细设计\n-   系统文档—用户与系统分析人员\n-   白盒测试—语句覆盖\n-   系统的可维护性\n-   软件评审\n-   面向对象分析步骤、设计原则\n-   UML关系：关联关系  UML各种图：状态图\n-   设计模式：中介者、策略\n-   数据库：三种模式、特殊符号含义\n-   栈、循环队列、双端队列、各种二叉树特性和公式、拓扑排序、哈夫曼树\n-   各种排序（归并、快速）的时空复杂度表、稳定性\n-   路由、ARP、网关\n-   编译程序的各种分析\n-   耦合的各种类型  内聚类型\n\n# 个人经验\n\n我开始准备软件设计师考试的时候其实距离考试时间仅仅一周多了，虽然最后考的分不高，但是也是稳稳地通过拿证了。那么如何在一周内完整突击呢？必须把仅五年的真题你所能掌握的每一道题做上三遍，**第一遍是闭卷写题，第二遍是对照着答案以及知识点笔记去记忆，第三遍是看错题**，注意上午是考选择题的，你做的题越多，出现原题的可能性就越大，考的基本都是类似的知识点，不需要去做一些额外的模拟题。而下午题是大题，考法非常的固定，算法题不会的话可以直接放弃，因为其他几道题做好已经能保证你高分通过了。考前就带着你的错题集或者试卷集去看，加深映象会发现考试的时候基本都是你碰到过得题型。\n\n最后大家如果需要我写的笔记或者有问题咨询的话可以在评论区留言！祝大家考出好成绩！！&#x20;",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1612112775822180354/29bfkZ4n-微信图片_20230225233105.jpg",
        "language": null,
        "viewNum": 226,
        "thumbNum": 23,
        "favourNum": 26,
        "commentNum": 6,
        "priority": 999,
        "userId": "1612112775822180354",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-02-25T15:31:15.000+00:00",
        "updateTime": "2023-03-26T12:23:11.000+00:00",
        "user": {
          "id": "1612112775822180354",
          "planetCode": "4838",
          "userName": "小火龙",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/vialKcxTib4GfndTME6AqsmGedeZrOGuOOXEZDibdk7csQUXZaXe8jXRr8mTQrCj049AGz48ZCRL7rIjvNicmEKo9A/132",
          "gender": 1,
          "userProfile": "计算机科学与技术专业本科在读，热爱生活，热爱技术。",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": "计算机科学与技术",
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "校招",
          "github": null,
          "blog": null,
          "score": 35,
          "coin": 170,
          "followeeNum": 6,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-01T01:02:21.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-08T15:43:32.000+00:00",
          "updateTime": "2023-03-20T14:28:39.000+00:00"
        },
        "tags": [
          "文章",
          "软考"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1628948649796993025",
        "title": "Git使用指南",
        "description": "从入门到实践，轻松学会Git！",
        "content": "### 1、了解Git的基本概念\n\n在学习Git之前，需要了解Git的基本概念。下面是一些术语：\n\n- 仓库（`Repository`）：Git用仓库来存储代码，仓库可以保存所有的版本历史记录。\n- 分支（`Branch`）：分支是Git中一个重要的概念。通过创建分支，你可以在代码的不同版本之间切换。\n- 提交（`Commit`）：在Git中，每次对代码进行的更改都需要提交。提交可以记录下当前代码的状态，并保存在Git的历史记录中。\n- 合并（`Merge`）：在Git中，你可以合并不同的分支，将它们合并成一个版本。\n- 远程仓库（`Remote Repository`）：远程仓库是指存储在其他计算机或服务器上的Git仓库。你可以通过Git与远程仓库进行交互，例如推送代码、拉取代码等。\n\n### 2、安装Git\n\n在学习Git之前，需要先安装Git。Git可以在`Windows`、`Linux`和`MacOS`等操作系统上运行。可以通过以下链接下载Git并安装：\n\n- Windows: https://git-scm.com/download/win\n- MacOS: https://git-scm.com/download/mac\n- Linux: https://git-scm.com/download/linux\n\n安装完成后，可以在命令行中输入`git --version`来检查Git是否安装成功。\n\n### 3、学习Git的命令行界面\n\nGit可以通过命令行界面进行交互。下面是一些常用的Git命令：\n\n- `git init`：初始化一个新的Git仓库。\n- `git add <file>`：将一个文件添加到Git的暂存区。\n- `git commit -m \"<message>\"`：将暂存区的文件提交到Git仓库，并附带一条提交信息。\n- `git push`：将本地仓库中的代码推送到远程仓库。\n- `git pull`：从远程仓库拉取最新的代码到本地仓库。\n- `git status`：查看当前仓库的状态，包括哪些文件已修改、哪些文件已经添加到暂存区等等。\n- `git log`：查看提交历史记录。\n\n### 4、使用Git的可视化界面工具\n\n除了命令行界面，Git还提供了一些可视化界面工具，如`GitHub Desktop`、`GitKraken`等等。这些工具可以帮助你更方便地使用Git，特别是对于初学者来说。可以在它们的官方网站上下载并安装，然后使用它们来管理你的Git仓库。\n\n### 5、练习Git的使用\n\n最好的学习方法就是实践。可以创建一个Git仓库，尝试添加文件、提交变更、合并分支等等，来熟悉Git的使用。在实践中，可以先创建一个本地仓库，然后尝试使用Git命令行界面或者可视化界面工具对仓库进行管理。下面是一些练习的建议：\n\n- 创建一个新的仓库，并将代码添加到仓库中。\n- 创建一个新的分支，并在分支中进行代码修改。\n- 将修改后的分支合并到主分支中。\n- 将代码推送到远程仓库中。\n\n此外，还可以参与开源项目，学习如何与其他开发者协作使用Git。GitHub是一个非常流行的开源代码托管平台，可以在上面找到许多有趣的项目来学习和参与。\n\n**总结：** 学习Git需要花费一定的时间和精力，但它是现代软件开发不可或缺的工具。通过不断的练习和实践，逐渐熟悉Git的使用，并在软件开发中发挥重要的作用。\n\nGit已经成为前端入门必须掌握的技能，从HTML阶段到网页布局项目实战都需要用到。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1627640946936008705/qahY9UXU-WeWf2Yis-image.png",
        "language": null,
        "viewNum": 270,
        "thumbNum": 16,
        "favourNum": 7,
        "commentNum": 2,
        "priority": 0,
        "userId": "1627640946936008705",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-02-24T02:43:17.000+00:00",
        "updateTime": "2023-03-26T16:35:45.000+00:00",
        "user": {
          "id": "1627640946936008705",
          "planetCode": "10478",
          "userName": "一",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1627640946936008705/7vDU9uxb-af2aea18-6152-44c5-ab03-e247c8a6af1d.jpg",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 35,
          "coin": 20,
          "followeeNum": 5,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2024-02-20T22:34:40.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-20T12:06:56.000+00:00",
          "updateTime": "2023-03-11T02:31:03.000+00:00"
        },
        "tags": [
          "文章",
          "前端",
          "工具",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1628708868894785537",
        "title": "前端 JavaScript 与 HTML 怎么实现交互",
        "description": null,
        "content": "前端 JavaScript 和 HTML 可以通过事件监听器、DOM 操作、Ajax、表单交互、动态创建和修改 HTML 元素等方式实现交互；具体的实现方式如下：\n\n# 1、事件监听器\n\nJavaScript 可以在 HTML 元素上设置事件监听器，以便在特定事件（例如单击、鼠标悬停或键盘敲击）发生时触发 JavaScript 代码。\n\n例如，以下代码段演示了如何在 HTML 元素上设置单击事件监听器：\n\n```js\n<button onclick=\"myFunction()\">Click me</button>\n\n<script>\nfunction myFunction() {\n alert(\"Hello World!\");\n}\n</script>\n```\n\n# 2、DOM 操作\n\nJavaScript 可以使用 Document Object Model (DOM) 操作 HTML 元素。DOM 是一种表示 HTML 页面的树形结构，可以使用 JavaScript 修改 HTML 元素的内容、属性和样式。\n\n例如，以下代码段演示了如何使用 JavaScript 获取 HTML 元素的值并将其更改为新值：\n\n```js\n<p id=\"demo\">Hello World!</p>\n\n<script>\nvar x = document.getElementById(\"demo\");\nx.innerHTML = \"Hello JavaScript!\";\n</script>\n```\n\n# 3、Ajax\n\nAjax 是一种使用 JavaScript 发送和接收数据的技术。它可以使 Web 应用程序与服务器进行交互，而无需刷新整个页面。\n\n例如，以下代码段演示了如何使用 Ajax 发送 GET 请求并在 HTML 页面上显示响应数据：\n\n```js\n<button onclick=\"loadDoc()\">Click me</button>\n\n<script>\nfunction loadDoc() {\n var xhttp = new XMLHttpRequest();\n xhttp.onreadystatechange = function() {\n   if (this.readyState == 4 && this.status == 200) {\n     document.getElementById(\"demo\").innerHTML = this.responseText;\n  }\n};\n xhttp.open(\"GET\", \"ajax_info.txt\", true);\n xhttp.send();\n}\n</script>\n```\n\n# 4、表单交互：\n\nHTML 中的表单元素（例如输入框、下拉列表、复选框等）可以与 JavaScript 进行交互。JavaScript 可以在表单元素上设置事件监听器，并读取或修改表单元素的值。\n\n例如，以下代码段演示了如何使用 JavaScript 获取表单元素的值：\n\n```js\n<form>\n <label for=\"name\">Name:</label>\n <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n <button type=\"button\" onclick=\"myFunction()\">Submit</button>\n</form>\n\n<script>\nfunction myFunction() {\n var name = document.getElementById(\"name\").value;\n alert(\"Hello \" + name + \"!\");\n}\n</script>\n```\n\n# 5、动态创建和修改 HTML 元素：\n\nJavaScript 可以动态创建和修改 HTML 元素，从而实现动态页面效果。例如，JavaScript 可以在页面上添加新元素、更改元素的样式、更改元素的内容等等。\n\n例如，以下代码段演示了如何使用 JavaScript 动态创建一个新的段落元素，并将其添加到页面中：\n\n```js\n<button onclick=\"myFunction()\">Add Paragraph</button>\n\n<script>\nfunction myFunction() {\n var para = document.createElement(\"p\");\n var node = document.createTextNode(\"This is a new paragraph.\");\n para.appendChild(node);\n\n var element = document.getElementById(\"div1\");\n element.appendChild(para);\n}\n</script>\n```\n\n以上是 JavaScript 和 HTML 实现交互的一些常见方式。通过使用这些技术，开发人员可以创建动态、交互式的 Web 应用程序。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1627640946936008705/svF7jtoX-640.jpg",
        "language": null,
        "viewNum": 37,
        "thumbNum": 2,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1627640946936008705",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-02-23T10:50:28.000+00:00",
        "updateTime": "2023-03-21T14:23:26.000+00:00",
        "user": {
          "id": "1627640946936008705",
          "planetCode": "10478",
          "userName": "一",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1627640946936008705/7vDU9uxb-af2aea18-6152-44c5-ab03-e247c8a6af1d.jpg",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 35,
          "coin": 20,
          "followeeNum": 5,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2024-02-20T22:34:40.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-20T12:06:56.000+00:00",
          "updateTime": "2023-03-11T02:31:03.000+00:00"
        },
        "tags": [
          "文章",
          "前端",
          "Javascript"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1628338827426869249",
        "title": "编程导航建议反馈",
        "description": "本帖用于收集鱼友们对本站的建议和反馈，欢迎来戳~",
        "content": "欢迎朋友们在评论区分享对网站的看法和建议、指出网站的 Bug 和不足、给我们提需求加功能等等。。。\n\n我们会精选部分有价值的反馈和建议（被精选可以获得积分奖励），努力持续改进，争取给大家提供更好的服务和体验。谢谢大家！",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1601072287388278786/HEeCzAaz-006APoFYly1gf114exyufj30b408cmy0.jpg",
        "language": null,
        "viewNum": 317,
        "thumbNum": 15,
        "favourNum": 2,
        "commentNum": 37,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-02-22T10:20:04.000+00:00",
        "updateTime": "2023-03-26T10:01:57.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 525,
          "coin": 170,
          "followeeNum": 296,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-26T14:44:22.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1627985464722059265",
        "title": "chatGPT大火，来看看chatGPT的创始人对于程序员成功的分享",
        "description": "chatGPT之父在2019年博客上分享的文章《how to be successful》",
        "content": "## 《程序员的成功之路》\n> - 如果你觉得文字读起来太累：https://www.bilibili.com/video/BV1bs4y1a7B7/?spm_id_from=333.337.search-card.all.click&vd_source=ce628a5bd43df277d141676215ef5ff3\n> - 如果你想阅读英文原文：http://blog.samaltman.com/how-to-be-successful\n\n### 1.选择复利增长\n复利具有神奇的魔力，现在处处都在强调复利，这其中的奥秘就是指数曲线，因为指数曲线是创造财富的关键。一家中型企业的价值如果按照每年50%的速度增长，那么它的规模可以在短时间内极速扩张。世界上少有企业具有真正的网络效应和高度的可扩展性，但是随着技术进步，这种情况会逐渐改变，这值得我们不断为之努力。\n\n对个体的人生道路来说，我们也应该走成一条指数曲线。也就是说，我们要遵循不断向右增长的人生轨迹。在进行职业规划时，要选择具有复合效应的职业，而大多数职业的发展轨迹都是一条线性直线。\n\n在线性职业领域，工作二十年的效率并不会比工作两年的效率高，像这样的职业不利于个人发展。\n\n我们需要的是一份能保持不断学习的职业。随着职业发展，我们需要产出越来越多的成果。达成这一目标的途径多种多样，比如说资本、技术、品牌、网络效应和做管理。\n\n专注于将你所定义的成功指标增加十倍是有用的，这些指标可以是赚钱、社会地位、世界级影响力或者其他东西。我乐意接受挑战，愿意在各种项目上花时间以解锁下一个项目。但是我希望在每一个项目上都能取得最大成就，创造职业生涯新高度。但是大多数人都被困于线性发展的泥潭，往往捡了芝麻丢了西瓜，我们要学会抓大放小，寻求跳跃式提升。\n\n在我看来，无论是企业还是个人，最大的竞争优势就是要把目标放长远。我们要打开眼界，看出世界上不同体系之间交融互动的方式。复合增长最重要的就是眼光要尽可能放长远，这样的人才能抢占市场先机，获得最大回报。\n\n要相信指数曲线，耐心坚持下去，最后一定会有惊喜。\n\n### 2.要有绝对自信\n自信拥有不可思议的力量，就我认识的人来说，最成功的往往都是那些自信到离谱的人。\n\n我们要尽早树立自信。如果你的判断常常都很准确，能带来很好的结果，那么你一定要加倍自信。\n\n对自己不自信的人很难对未来抱有逆向思维，但是往往逆向思维才能创造出最大的价值。还记得很多年前马斯克带我参观SpaceX工厂，他详细地谈到了制造火箭的一些细节，但是让我印象最深的还是马斯克谈到向火星发射火箭时的表情，离开工厂时我就在想 “啊，这就是自信的样子”。\n\n对大多数创业者来说，激发自己以及团队的士气可以说是最大的挑战之一，如果没有自信，这就成了几乎不可能完成的任务。但往往一个人越有雄心壮志，其受到的打击就会越多。大多数非常成功的人在面对人们的质疑时至少有一次决定是正确的，否则他们面临的挑战会更多。\n\n我们在自信的同时也要保持清醒的自我认知，才能避免盲目自大。我曾经非常讨厌受到批评和质疑，并且总是设法规避这些批评。但现在我开始尝试听取这些意见，我会先设想这些批评是正确的，然后在这个基础上调整我的计划。做决定的过程充满了艰辛和痛苦，但也只有经历了这个过程才能将自信和自欺欺人区分开来。\n\n保持自信与自我认知之间的平衡可以让人免于傲气、避免与他人脱节。\n\n### 3.学会独立思考\n创业很难，因为培养原创性思维很难。这种思维在学校里面是学不到的，实际上学校培养的是一种相反的思维方式，所以只能靠我们自己来培养原创性思维。\n\n我们可以从第一性原理(first principles) 出发，从中想出新的点子，然后与人交流沟通，对这些想法进行改良，之后我们再用轻松快捷的方式进行实际测试。\n\n对创业者来说，失败是家常便饭，但我们一定要抱有必胜的信念，要不断尝试、不断试错，只有这样才能得到幸运之神的眷顾。在这个过程中，最宝贵的经验之一就是，我们要学会在绝境中找到一线生机。我们经历的越多就会越对此深信不疑。要知道勇气来自于多次失败后的坚持不懈。\n\n### 4.做一个好销售\n光有自信是不够的，我们还要具备说服他人的能力。就某种程度来说，所有职业的本质都是销售。你必须向客户、潜在职员、媒体、投资者等宣传兜售你的计划。想要说服他们，首先你的计划要有广阔的发展前景。对于个人而言，你要具备良好的沟通能力、一定的个人魅力以及强大的执行能力。\n\n具备良好的沟通能力十分重要，尤其是书面沟通。在这方面我的建议是：首先要保持思路清晰，然后就是尽量使用简洁明了的语言。\n\n而要做好“销售”最好的方式就是真诚，要对自己推销的产品抱有自信。销售其实无异于其他技能，我们可以通过可以练习提高销售技能。但是出于某些原因（比如人们可能不喜欢销售），很多人认为销售技能不可习得。\n\n做销售的另一个秘诀是:重要的事情要亲力亲为。在刚开始创业时，我非常乐意出差办事，这在很多人看来是不必要的，但是事事亲力亲为却给我带来了三次职业生涯的转折点，如果当时没有选择这样做，我可能会走上另一条道路。\n\n### 5.要有冒险精神\n大多数人往往都高估了风险低估了回报。冒险对我们来说也很重要，因为人不可能永远不犯错，我们需要不断试错，学习并快速适应。\n\n在职业生涯早期，人们往往更愿意冒险，因为那时你没有什么可失去的东西，但却可能得到很多。一旦一个人履行了自己的基本责任义务，就可以大胆冒险了。我篇幅可以先下小的赌注，如果赌输了会输掉1倍，但如果成功了，则可以赚到100倍。之后我们再沿着这个方向下更大的赌注。\n\n但是要注意不能一直待在舒适圈。在YC，我们从谷歌和脸书长期工作的创始人身上看到了这样一个问题：当人们习惯了舒适的生活、稳定的工作和无论做什么都会取得成功的名气时，就很难将这些置之于身后了（人们总是将他们的生活方式与下一年的工资相匹配）。即使他们真的离开了，也非常有可能再回来。与长期利益相比，短期诱惑和便利往往更具吸引力，也更符合人的天性。\n\n但当你摆脱了这些枯燥无味的工作，你可以跟随直觉将时间花在那些有趣的事情上。而想做到这一点，尽可能长时间地过着朴素灵动的生活是一个很好的方法。当然，任何选择背后都有相应的代价。\n\n### 6.保持专注\n专注可以让我们在工作中取得事半功倍的效果。磨刀不误砍柴工，在我认识的人中，那些花时间想明白了未来方向的人最后都得到了不错的结果。由此可见，做正确的事比长时间做事更重要。很多人都将自己的时间花在了无关紧要的事情上面。\n\n一旦你想明白了该做什么，就不要犹豫，快速行动起来去完成优先事项。毕竟成功人士就没有执行力弱的。\n\n### 7.努力工作\n通过运用自己的聪明才智或者勤奋努力，一个人可以达成工作领域里百分之九十的成就，能做到这一点已经很不错了，但是想要尽量做到完美，达成百分之九十九的成就，那就必须要兼顾聪明与勤奋，因为这一阶段你的竞争者往往是两者兼备的人。\n\n有付出才有收获，付出越多收获也就越大。努力工作可能会造成工作与生活失衡，我完全可以理解有的人选择去更好地平衡工作与生活，在工作中不那么拼命，但是拼命工作确实有很多好处，在多数情况下，努力工作会产生叠加效应，越是成功的人就越能成功。\n\n这通常很有趣。生活中最大的乐趣之一就是找到你的目标，并且有所建树，然后你会发现你在这件事上的影响力比你自己本身更重要。一位YC创始人表示：他在离开一家大公司后，尽力发挥了自己的最大影响力，此时他发现自己变得更快乐、更充实。\n\n为发挥出自己最大影响力而努力工作是值得庆祝的。我完全不能理解为什么在美国某些地区努力工作反而成了一件坏事，但我知道世界其他地区肯定不是这样的，那些地区的企业家表现出来的精力和干劲正在快速成为新的社会标杆。\n\n你必须想出一条平衡之策，在努力工作的同时，又不至于透支身体。对此，虽然人们的应对之策不尽相同，但有条几乎不会出错的黄金准则，那就是与相处愉快的人一起从事喜欢的工作。\n\n我认为，那些假装(在你生命中的某个时期)不用把精力放在工作上，就能平步青云的人，其实是在误人子弟。事实上，判断一个人能否笑到最后的关键因素之一就是工作耐力。\n\n另外，我认为刚入职场时就应该要努力工作。努力工作就像利滚利一样，越早开始，获利时间就越长。一般来说，人们身上背负的责任越少，就越容易施展身手。\n\n### 8.大胆一点\n在我看来，与轻松创业相比，人们多半会选择更具挑战性的事业。因为后者往往更激动人心，能带来更大的成就感和满足感。如果你在某个重大问题上取得了进展，就会有源源不断的人前来帮忙。志当存高远，不要害怕去做你真正想做的事情。\n\n如果别人都在创办 meme 公司，而唯独你想创办一家基因编辑公司那就去做吧，不要犹豫。\n\n追随你的好奇心。那些让你感到兴奋的事情，通常也适用于别人。\n\n### 9.足够坚定\n很多人都不知道，只要你足够坚持，世界就会以你的意志为转移。但大多数人甚至都不会去尝试，只单纯认为世界有其自身的运作规律。\n\n人的潜力是巨大的，只要敢想就能做成很多事。但大多数人都会怀疑自我、过早放弃，同时又不够努力，种种原因导致大多数人无法充分发挥自身潜能。\n\n询问自身诉求，你通常不能得偿所愿，而且被拒绝的滋味往往不好受。但若一旦成功，效果就会好得出奇。\n\n那些声称“我将永不言弃，直到梦想成真，不论前方有多少艰难险阻，我也会迎难而上”，并将其付诸行动的人，最后几乎总能获得成功。因为他们坚持了足够久，所以最终迎来了幸运之神的眷顾。\n\n在这方面，爱彼迎 (Airbnb)是我认为的行动标杆。业内流传着许多有关爱彼迎的逸闻趣事，虽然我并不推崇他们的做法(比如透支信用卡、每顿都吃一元店买的麦片、乐此不疲地与强劲的对手进行较量等等) 但是正因为他们足够坚持，最后终于时来运转。\n\n只有保持乐观才能足够坚定，而乐观这种性格特征是可以通过练习逐步提升的，而悲观者是很难成功的。\n\n### 10.保持强劲的市场竞争力\n大多数人都明白，企业竞争力越强，价值就越高。这点至关重要，而且也是显而易见的。这同样也适用于个人。如果你所从事的工作具有可替代性，那么你最终就会被薪资要求更低的人所取代。\n\n增强竞争力的最佳方式就是建立话语权。例如，你可以利用好个人关系，打造强大的个人品牌，或是在不同领域的交叉点建立起自己的个人优势。当然增强竞争力的方式还有很多但不论采取什么方式，关键是你必须要做到这一点。\n\n大多数人会模仿身边人的做法，但这种方式并不可取，如果一味模仿他人，那你还有什么竞争优势可言呢？\n\n### 11.建立人际网络\n出色的工作需要团队合作。打造既可密切合作又可轻松相处的优质人际网络是事业成功的必要因素。拥有优秀人才的人际网络的规模会决定你能成功的上限。\n\n建立人际网络的有效方法之一是尽可能多帮助他人。长期以来，这种行为方式给我带来了最佳职场机遇以及四项最佳投资中的三项。我总是惊讶与发生在自己身上的意外之喜，仅仅因为我十年前曾帮助过一位企业创始人。\n\n建立人际网络的另一个途径是拥有好的名声，不亏待每一个一起共事的人。要大方慷慨地与他人分享资源，这会给你带来10倍、100倍的回报。此外，要知人善用，让每个人都能充分施展自己的才华。\n\n我们既要尽力挖掘他人的潜力但是又不能逼得太紧，这容易让人感到精疲力尽。每个人都有各自擅长的领域，因此，我们要多看看自己的优点，不要总盯着缺点，要用优点来定义自身。面对缺点，我们要承认它，想办法弥补它，不要让缺点成为我们前进路上的阻碍。我常能在一些创业者口中听到这样的说法“我不能做A，因为我不擅长B”。这种思维方式让我十分吃惊。这反映出他们缺乏创造力。弥补弱点的最佳方式是聘请互补的团队成员，而不是雇佣那些跟你擅长相同事情的人。\n\n慧眼识珠挖掘未被发掘的人才是建立人际网络的有效途径。通过练习，我们能快速识别那些优质有动力、有创造力的人才。挖掘人才最简单的方式就是多社交，多与他人打交道并且与那些给你留下深刻印象的人保持联系。要记住一点，不要局限于他人过往的工作经验和当前成就，我们需要发掘那些有潜力且能在短时间激发潜能的人。\n\n每当遇到新人，我都会扪心自问“这个人有异于常人的能力吗？”对于渴求人才的人来说，这个问题很值得思考。\n\n建立人际网络的特例是找到你生命中的贵人，特别是在职业生涯早期。毫无疑问，能做到这点的最佳方法就是主动去帮助他人（记住，你必须在日后回报你的贵人！）\n\n最后，我们要结交那些积极向上且志同道合之人。\n\n### 12.资产决定财富\n小时候，我对经济的最大误解就是人们通过高薪发财致富。虽然也有一些特例，比如说娱乐圈的艺人，但从以往的福布斯榜单来看，几乎没有人是靠高薪荣登榜单的。\n\n拥有能迅速增值的东西才能真正发家致富。这些东西可以是商业资产、不动产、自然资源、知识产权等。但无论怎样，你需要实际拥有一些东西，而不是单靠出卖时间赚取工资，出卖时间赢来的财富只会呈慢速线性增长。\n\n让事物迅速增值的最佳方法就是大量制造人们想要的东西。\n\n### 13.要有内驱力\n大多数人主要都是靠外部驱动，他们做事情是为了让别人佩服。这种做法坏处颇多，但以下两点最为突出：\n\n首先这会导致你人云亦云，因循守旧。在工作中，你会过于在意他人的看法，这种在意程度可能已经远远超出了你的意识，并且这会阻碍你从事趣味性工作，即使你正在做这样的工作，也不过是在炒冷饭。\n\n其次，这会让你误判风险等级。从短期影响来看，你会将注意力主要放在和他人的竞争上，以确保不会在竞争游戏中落后。\n\n聪明人似乎更容易受到这种外驱力的影响。了解到了这一点可以帮助你摆脱这种影响，但帮助不大，我们必须要极其谨慎才能不至于掉入模仿他人的陷阱中。\n\n我认识的大多数成功人士都是靠自我驱动。他们做事情是为了让自己心悦诚服，因为他们觉得给世界带来改变是自己的责任。当你赚得盆满钵满并且拥有了较高的社会地位之后，金钱和名誉对你的吸引力开始逐渐消失，这时候内驱力就成为了唯一的动力，推动你向更高的地方攀登。\n\n这就是驱动力重要性的体现。驱动力是我了解他人时最先考察的点。我们很难用一套规则去定义正确的驱动力，但是当你遇到它时立刻就能有所体会。在这件事上，Jessica Livingston和Paul Graham是我认为的行动标杆。在YC创办的最初几年，人人都不看好它的发展，没有人认为YC能够成功。但是杰西卡和保罗很看好YC的发展，他们认为如果YC能够成功，将会对世界大有裨益，他们希望能够借此帮助到其他人，并且坚信这种新模式比现存的模式好。\n\n最终你会发现成功是在自己看重的领域里做出出色的成绩。向着自己热爱的方向越早出发就能走得越远，没有热爱之事的人是很难取得成就的。\n\n以上就是这篇博客的全文了，感谢也恭喜你看到这里，说明你是一个想要改变自己的人，很喜欢最近听到的一个道理，我总结在最后，与大家共勉！\n> “其实我今天说的这些建议，结论并不重要，因为我相信大家也不会因为今天听我说了一遍，明天你就会去实践，所以最重要的是，你要记得这些事情背后更深层的意义是什么。当你懂的了的事情背后的意义，日积月累，哪天你就可以顿悟，然后你就回去行动，最终带来一些改变 ” -\t冴羽",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1619930914211520514/NQ5LYd2q-slug_pic.jpg",
        "language": null,
        "viewNum": 108,
        "thumbNum": 10,
        "favourNum": 3,
        "commentNum": 1,
        "priority": 0,
        "userId": "1619930914211520514",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-02-21T10:55:55.000+00:00",
        "updateTime": "2023-03-26T10:21:14.000+00:00",
        "user": {
          "id": "1619930914211520514",
          "planetCode": "1012",
          "userName": "SnailRun",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/aRneVaen8XSWOILibfkW5SHicYZia2oDxA8zKUtnzLRVFbwiclEK8f80QMRk3kviawzL8gTWk4MgA0P0VeF1r0O0upg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 1,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-05T23:06:53.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-30T05:30:01.000+00:00",
          "updateTime": "2023-03-26T06:05:17.000+00:00"
        },
        "tags": [
          "文章",
          "B站",
          "视频",
          "ChatGPT"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "14",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "2"
  },
  "message": "ok"
}